#!/usr/bin/env python

'''Partial sort tool.

Allows the use to specify that only part of a file should be sorted.

The output is always written to stdout.

Example:

$ psort LOG 34 56

will preserve the order of lines 1-33. Will sort lines 34-56, and then
will preserve the order of lines 56 to the end of the file.

Multiple sorts blocks are allowed

$ posrt LOG 1 10 20 30

Will sort the lines between 1-10 and between 20-30.

Rows start at row number 0.
To sort to the end of the file use -1 for the stop row.  Ie

$ psort LOG 0 -1

will sort the entire file.

$ psort LOG 1 -1

will skip the 1st row and will sort the remainder of the file.

'''

import sys

nargs = len(sys.argv)

if nargs < 4:
    sys.stderr.write("Usage: psort infile start stop [start stop [start stop]]\n")
    sys.exit(1)

infile = sys.argv[1]

# -1 is to convert line number to python array index
strt_lines = [int(sys.argv[x]) for x in range(2, nargs, 2)]
stop_lines = [int(sys.argv[x]) for x in range(3, nargs, 2)]

if len(strt_lines) != len(stop_lines):
    raise RuntimeError("Must have equal number of start and stop lines. Used -1 for end-of-file")

lines = open(infile, "r").readlines()

for beg, end in zip(strt_lines, stop_lines):
    if end == -1:
        end = len(lines)
    out_buffer = []
    out_buffer.extend(lines[0:beg])
    sort_buff = sorted(lines[beg:end+1])
    out_buffer.extend(sort_buff)
    out_buffer.extend(lines[end+1:])
    lines = out_buffer

sys.stdout.write("".join(lines))
